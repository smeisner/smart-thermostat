// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.0
// LVGL version: 8.3.6
// Project name: Thermostat

#include "thermostat.hpp"
#include "ui.h"
#include "version.h"
#include <ctype.h>
// #include <nvs_flash.h>    // For nvs_flash_init()

#define screenWidth 320
TaskHandle_t ntScanTaskHandler = NULL;

void tftUpdateTempSet(lv_event_t * e)
{
//  char tmp[16];
//  strncpy(tmp, lv_label_get_text(ui_SetTemp), sizeof(tmp));

  OperatingParameters.tempSet = (float)(lv_arc_get_value(ui_TempArc)) / 10.0;
  printf ("Current temp set to: %.1f\n", OperatingParameters.tempSet);

//  OperatingParameters.tempSet = tmp)/10);
  tftWakeDisplay(false);
}

void tftDecreaseSetTemp(lv_event_t * e)
{
  if (OperatingParameters.tempUnits == 'C')
  {
    OperatingParameters.tempSet -= 0.5;
    updateHvacSetTemp(roundValue(OperatingParameters.tempSet, 1));
  } else {
    OperatingParameters.tempSet -= 1.0;
    updateHvacSetTemp(roundValue(OperatingParameters.tempSet, 0));
  }
  lv_arc_set_value(ui_TempArc, OperatingParameters.tempSet*10);
  lv_label_set_text_fmt(ui_SetTemp, "%d°", int(OperatingParameters.tempSet));
  if (OperatingParameters.tempUnits == 'C')
    lv_label_set_text_fmt(ui_SetTempFrac, "%d", (int)getRoundedFrac(OperatingParameters.tempSet));
}

void tftIncreaseSetTemp(lv_event_t * e)
{
  if (OperatingParameters.tempUnits == 'C')
  {
    OperatingParameters.tempSet += 0.5;
    updateHvacSetTemp(roundValue(OperatingParameters.tempSet, 1));
  } else {
    OperatingParameters.tempSet += 1.0;
    updateHvacSetTemp(roundValue(OperatingParameters.tempSet, 0));
  }
  lv_arc_set_value(ui_TempArc, OperatingParameters.tempSet*10);
  lv_label_set_text_fmt(ui_SetTemp, "%d°", int(OperatingParameters.tempSet));
  if (OperatingParameters.tempUnits == 'C')
    lv_label_set_text_fmt(ui_SetTempFrac, "%d", (int)getRoundedFrac(OperatingParameters.tempSet));
}

void tftHvacModeChange(lv_event_t * e)
{
//  OperatingParameters.hvacSetMode = (HVAC_MODE)(lv_dropdown_get_selected(ui_ModeDropdown));
//  OperatingParameters.hvacSetMode = getHvacMode();
  char mode[12];
  lv_dropdown_get_selected_str(ui_ModeDropdown, mode, sizeof(mode));
  updateHvacMode(strToHvacMode(mode));

  switch (OperatingParameters.hvacSetMode)
  {
    // Set color of outer ring to represent set mode
    case AUX_HEAT:
    case HEAT:     lv_obj_set_style_bg_color(ui_SetTempBg1, lv_color_hex(0xc71b1b), LV_PART_MAIN); break;
    case COOL:     lv_obj_set_style_bg_color(ui_SetTempBg1, lv_color_hex(0x1b7dc7), LV_PART_MAIN); break;
    case FAN_ONLY: lv_obj_set_style_bg_color(ui_SetTempBg1, lv_color_hex(0x23562b), LV_PART_MAIN); break;  //@@@
    case AUTO:     lv_obj_set_style_bg_color(ui_SetTempBg1, lv_color_hex(0xaeac40), LV_PART_MAIN); break;
    default:       lv_obj_set_style_bg_color(ui_SetTempBg1, lv_color_hex(0x7d7d7d), LV_PART_MAIN); break;
  }
  
  tftWakeDisplay(true);
}

void tftAwaken(lv_event_t * e)
{
  tftWakeDisplay(true);
}

void tftStopTouchTimer(lv_event_t * e)
{
  tftDisableTouchTimer();
}

void tftBeep(lv_event_t * e)
{
  audioBeep();
}

void wifiScanner(void *pvParameters)
{
  WiFi_ScanSSID();

  lv_dropdown_set_options(ui_SsidDropdown, Get_WiFiSSID_DD_List());
  lv_label_set_text(ui_WifiStatusLabel, "Scan Done");
  ui_WifiStatusLabel_timestamp = millis();
  lv_obj_clear_state(ui_ScanBtn, LV_STATE_DISABLED);
  audioBeep();

  ntScanTaskHandler = NULL;
  vTaskDelete(NULL);
}

static void networkScanner() {
  xTaskCreate(wifiScanner,
              "ScanWifiTask",
              4096,
              NULL,
              tskIDLE_PRIORITY+2,
              &ntScanTaskHandler);
}

void StartWifiScan(lv_event_t * e)
{
  audioBeep();
  lv_obj_add_state(ui_ScanBtn, LV_STATE_DISABLED);
  lv_label_set_text(ui_WifiStatusLabel, "Scanning...");

  // Scan for SSIDs. This is done synchronously, so complete it via a RTOS task.
  networkScanner();
}

extern bool wifiScanActive;

void stopWifiScan(lv_event_t * e)
{
  if (ntScanTaskHandler != NULL)
  {
    vTaskDelete(ntScanTaskHandler);
    ntScanTaskHandler = NULL;
  }
  lv_label_set_text(ui_WifiStatusLabel, "Scan Aborted");
  ui_WifiStatusLabel_timestamp = millis();
  lv_obj_clear_state(ui_ScanBtn, LV_STATE_DISABLED);
  wifiScanActive = false;
}

#define LABEL_COLOR "#850808"

void LoadInfoStrings(lv_event_t * e)
{
#ifdef MATTER_ENABLED
  if (OperatingParameters.MatterEnabled)
  {
    lv_obj_clear_flag(ui_ShowQR, LV_OBJ_FLAG_HIDDEN);
    lv_obj_clear_flag(ui_ShowQRLabel, LV_OBJ_FLAG_HIDDEN);
  }
  else
#endif
  {
    lv_obj_add_flag(ui_ShowQR, LV_OBJ_FLAG_HIDDEN);
    lv_obj_add_flag(ui_ShowQRLabel, LV_OBJ_FLAG_HIDDEN);
  }

  if (WifiConnected())
    lv_obj_add_state(ui_WifiConnCheckBox, LV_STATE_CHECKED);
	else
    lv_obj_clear_state(ui_WifiConnCheckBox, LV_STATE_CHECKED);
  lv_label_set_recolor(ui_WifiSsidLabel, true);
  lv_label_set_text_fmt(ui_WifiSsidLabel, "%s SSID:# %s", LABEL_COLOR, WifiCreds.ssid);

  lv_label_set_recolor(ui_HostnameLabel, true);
  lv_label_set_text_fmt(ui_HostnameLabel, "%s Hostname:# %s", LABEL_COLOR, OperatingParameters.DeviceName);

  lv_label_set_recolor(ui_IPLabel, true);
  lv_label_set_text_fmt(ui_IPLabel, "%s IP:# %s", LABEL_COLOR, WifiAddress());

  lv_label_set_recolor(ui_RssiLabel, true);
  lv_label_set_text_fmt(ui_RssiLabel, "%s Signal:# %d%%", LABEL_COLOR, WifiSignal());

  lv_label_set_recolor(ui_FwVersionLabel, true);
  lv_label_set_text_fmt(ui_FwVersionLabel, "%s Firmware:# %s", LABEL_COLOR, VersionString);

  lv_label_set_recolor(ui_BuildDateLabel, true);
  lv_label_set_text_fmt(ui_BuildDateLabel, "%s Build date:# %s", LABEL_COLOR, VersionBuildDateTime);

//  lv_label_set_long_mode(ui_CopyrightLabel, LV_LABEL_LONG_SCROLL_CIRCULAR);
  lv_obj_set_width(ui_CopyrightLabel, screenWidth - 2);
  lv_label_set_text_fmt(ui_CopyrightLabel, "%s", VersionCopyright);
}

void tftUpdateTempCorrectionValue(lv_event_t * e)
{
  lv_obj_t * slider = lv_event_get_target(e);
  char buf[8];
  lv_snprintf(buf, sizeof(buf), "%.1f°", (float)lv_slider_get_value(slider)/10.0);
  lv_label_set_text(ui_TempCorrectionLabel, buf);
  OperatingParameters.tempCorrection = (float)lv_slider_get_value(slider)/10.0;
}

void tftUpdateTempSwingValue(lv_event_t * e)
{
  lv_obj_t * slider = lv_event_get_target(e);
  char buf[8];
  lv_snprintf(buf, sizeof(buf), "%.1f°", (float)lv_slider_get_value(slider)/10.0);
  lv_label_set_text(ui_TempSwingLabel, buf);
  OperatingParameters.tempSwing = (float)lv_slider_get_value(slider)/10.0;
}

void tftUpdateUiSleepValue(lv_event_t * e)
{
  lv_obj_t * slider = lv_event_get_target(e);
  char buf[8];
  lv_snprintf(buf, sizeof(buf), "%d s", (int)lv_slider_get_value(slider));
  lv_label_set_text(ui_UiSleepLabel, buf);
  OperatingParameters.thermostatSleepTime = lv_slider_get_value(slider);
}

void tftSetNewWifi(lv_event_t * e)
{
  lv_dropdown_get_selected_str(ui_SsidDropdown, WifiCreds.ssid, sizeof(WifiCreds.ssid));
  if (strlen(WifiCreds.ssid) > 0)
  {
    strcpy (WifiCreds.password, lv_textarea_get_text(ui_PSK));
    printf ("*** [tftSetNewWifi] WifiCreds.password = %s\n", WifiCreds.password);
    // Save the new wifi credentials to NVRAM
    setWifiCreds(); //Store locally (in Thermostat NVS)
    WifiSetCredentials(WifiCreds.ssid, WifiCreds.password);
    // Initiate a disconnect so the new wifi info will be used when auto-reconnect happens
    WifiDisconnect();

    // Immediately start a new wifi connection
    lastWifiReconnect = 0;
//    startReconnectTask();
  }
}

void tftClearPsk(lv_event_t * e)
{
  lv_textarea_set_text(ui_PSK, "");
}

void SaveConfigSettings(lv_event_t * e)
{
  if (lv_obj_has_state(ui_TempUnitsSwitch, LV_STATE_CHECKED))
  {
    // Switch to Celcius
    if (OperatingParameters.tempUnits == 'F')
    {
      OperatingParameters.tempSet = (OperatingParameters.tempSet - 32.0) / (9.0/5.0);
      OperatingParameters.tempCurrent = (OperatingParameters.tempCurrent - 32.0) / (9.0/5.0);
      OperatingParameters.tempCorrection = OperatingParameters.tempCorrection * 5.0 / 9.0;
      OperatingParameters.tempSwing = OperatingParameters.tempSwing * 5.0 / 9.0;
      resetTempSmooth();
    }
    OperatingParameters.tempUnits = 'C';
    lv_arc_set_range(ui_TempArc, 7*10, 33*10);
    lv_obj_clear_flag(ui_SetTempFrac, LV_OBJ_FLAG_HIDDEN);
  } else {
    // Switch to Fahrenheit
    if (OperatingParameters.tempUnits == 'C')
    {
      OperatingParameters.tempSet = (OperatingParameters.tempSet * 9.0/5.0) + 32.0;
      OperatingParameters.tempCurrent = (OperatingParameters.tempCurrent * 9.0/5.0) + 32.0;
      OperatingParameters.tempCorrection = OperatingParameters.tempCorrection * 1.8;
      OperatingParameters.tempSwing = OperatingParameters.tempSwing * 1.8;
      resetTempSmooth();
    }
    OperatingParameters.tempUnits = 'F';
    lv_arc_set_range(ui_TempArc, 45*10, 92*10);
    lv_obj_add_flag(ui_SetTempFrac, LV_OBJ_FLAG_HIDDEN);
  }

  // Update current temp
  // Do not use getTemp() since it won't have any data yet.
  lv_label_set_text_fmt(ui_TempLabel, "%d°", int(OperatingParameters.tempCurrent));
  // Update temp set arc
  lv_arc_set_value(ui_TempArc, OperatingParameters.tempSet*10);
  // ...and finally the text for the set temp
  lv_label_set_text_fmt(ui_SetTemp, "%d°", int(OperatingParameters.tempSet));
  if (OperatingParameters.tempUnits == 'C')
  {
    // Set smaller fractional part of temp rounded to nearest .5
    lv_label_set_text_fmt(ui_SetTempFrac, "%d", (int)getRoundedFrac(OperatingParameters.tempSet));
  }

  OperatingParameters.hvacCoolEnable = lv_obj_has_state(ui_HvacCoolCheckbox, LV_STATE_CHECKED);
  OperatingParameters.hvacFanEnable = lv_obj_has_state(ui_HvacFanCheckbox, LV_STATE_CHECKED);

  setHvacModesDropdown();

//
// If MQTT or Matter are enabled and that selection is changing, we need
// to update the internal state (in OperatingParameters and eeprom) before
// restarting the ESP32.
//
#ifdef MATTER_ENABLED
  bool prevMatter = OperatingParameters.MatterEnabled;
  OperatingParameters.MatterEnabled = lv_obj_has_state(ui_HomeAutomationCheckbox, LV_STATE_CHECKED);
#endif
#ifdef MQTT_ENABLED
  bool prevMqtt = OperatingParameters.MqttEnabled;
  OperatingParameters.MqttEnabled = lv_obj_has_state(ui_HomeAutomationCheckbox, LV_STATE_CHECKED);
#endif

// All fields updated...write to eeprom
  updateThermostatParams();

#ifdef MATTER_ENABLED
  if (OperatingParameters.MatterEnabled != prevMatter)
  {
    //@@@ Disable all HVAC activity before restarting
    printf ("Matter enablement changed!\n");
    wifiSwitchMatterMode();
    if (!OperatingParameters.MatterEnabled)
    {
      // MatterFactoryReset() will be called from tftCountDown() func
      _ui_screen_change(&ui_ThermostatRestart, LV_SCR_LOAD_ANIM_MOVE_RIGHT, 500, 0, &ui_ThermostatRestart_screen_init);
    }
  }
#endif
#ifdef MQTT_ENABLED
  if (OperatingParameters.MqttEnabled != prevMqtt)
  {
    //@@@ Disable all HVAC activity before restarting
    printf ("MQTT enablement changed!\n");
    if (!OperatingParameters.MqttEnabled)
    {
      _ui_screen_change(&ui_ThermostatRestart, LV_SCR_LOAD_ANIM_MOVE_RIGHT, 500, 0, &ui_ThermostatRestart_screen_init);
    }
  }
  else
  {
    if (OperatingParameters.MqttEnabled && OperatingParameters.MqttConnected)
    {
      // Update config by sending a new discovery packet
      MqttHomeAssistantDiscovery();
    }
  }
#endif
}

void LoadConfigSettings(lv_event_t * e)
{
  lv_label_set_text_fmt(ui_TempCorrectionLabel, "%.1f", OperatingParameters.tempCorrection);
  lv_slider_set_value(ui_TempCorrectionSlider, OperatingParameters.tempCorrection*10, LV_ANIM_OFF);
  lv_label_set_text_fmt(ui_TempSwingLabel, "%.1f", OperatingParameters.tempSwing);
  lv_slider_set_value(ui_TempSwingSlider, OperatingParameters.tempSwing*10, LV_ANIM_OFF);
  if (OperatingParameters.tempUnits == 'F')
    lv_obj_clear_state(ui_TempUnitsSwitch, LV_STATE_CHECKED);
  else
    lv_obj_add_state(ui_TempUnitsSwitch, LV_STATE_CHECKED);
  if (OperatingParameters.hvacCoolEnable)
    lv_obj_add_state(ui_HvacCoolCheckbox, LV_STATE_CHECKED);
  else
    lv_obj_clear_state(ui_HvacCoolCheckbox, LV_STATE_CHECKED);
  if (OperatingParameters.hvacFanEnable)
    lv_obj_add_state(ui_HvacFanCheckbox, LV_STATE_CHECKED);
  else
    lv_obj_clear_state(ui_HvacFanCheckbox, LV_STATE_CHECKED);

#if !defined(MATTER_ENABLED) && !defined(MQTT_ENABLED)
  lv_obj_add_flag(ui_HomeAutomationLabel, LV_OBJ_FLAG_HIDDEN);
  lv_obj_add_flag(ui_HomeAutomationCheckbox, LV_OBJ_FLAG_HIDDEN);
  lv_obj_add_flag(ui_SetupMqttBtn, LV_OBJ_FLAG_HIDDEN);
  lv_obj_add_flag(ui_SetupMqttLabel, LV_OBJ_FLAG_HIDDEN);
#endif

#ifdef MATTER_ENABLED
  lv_label_set_text(ui_HomeAutomationLabel,"Matter Enable:");
  if (OperatingParameters.MatterEnabled)
    lv_obj_add_state(ui_HomeAutomationCheckbox, LV_STATE_CHECKED);
  else
    lv_obj_clear_state(ui_HomeAutomationCheckbox, LV_STATE_CHECKED);

  lv_obj_add_flag(ui_SetupMqttBtn, LV_OBJ_FLAG_HIDDEN);
  lv_obj_add_flag(ui_SetupMqttLabel, LV_OBJ_FLAG_HIDDEN);
#endif

#ifdef MQTT_ENABLED
  lv_label_set_text(ui_HomeAutomationLabel,"MQTT Enable:");
  //@@@ For now, if we compile with MQTT support, enable the config button
  if (OperatingParameters.MqttEnabled)
    lv_obj_add_state(ui_HomeAutomationCheckbox, LV_STATE_CHECKED);
  lv_obj_clear_flag(ui_SetupMqttBtn, LV_OBJ_FLAG_HIDDEN);
  lv_obj_clear_flag(ui_SetupMqttLabel, LV_OBJ_FLAG_HIDDEN);

  // if (OperatingParameters.MqttEnabled)
  // {
  //   lv_obj_add_state(ui_HomeAutomationCheckbox, LV_STATE_CHECKED);
  //   lv_obj_clear_flag(ui_SetupMqttBtn, LV_OBJ_FLAG_HIDDEN);
  //   lv_obj_clear_flag(ui_SetupMqttLabel, LV_OBJ_FLAG_HIDDEN);
  // }
  // else
  // {
  //   lv_obj_clear_state(ui_HomeAutomationCheckbox, LV_STATE_CHECKED);
  //   lv_obj_add_flag(ui_SetupMqttBtn, LV_OBJ_FLAG_HIDDEN);
  //   lv_obj_add_flag(ui_SetupMqttLabel, LV_OBJ_FLAG_HIDDEN);
  // }
#endif
}

void LoadUncommonSettings(lv_event_t * e)
{
  lv_dropdown_set_selected(ui_TimezoneDropdown, OperatingParameters.timezone_sel);

  lv_slider_set_value(ui_UiSleepSlider, OperatingParameters.thermostatSleepTime, LV_ANIM_OFF);
  lv_label_set_text_fmt(ui_UiSleepLabel, "%d s", OperatingParameters.thermostatSleepTime);

  if (OperatingParameters.thermostatBeepEnable)
    lv_obj_add_state(ui_AudibleBeepCheckbox, LV_STATE_CHECKED);
  else
    lv_obj_clear_state(ui_AudibleBeepCheckbox, LV_STATE_CHECKED);

  if (OperatingParameters.hvac2StageHeatEnable)
    lv_obj_add_state(ui_Hvac2StageHeatCheckbox, LV_STATE_CHECKED);
  else
    lv_obj_clear_state(ui_Hvac2StageHeatCheckbox, LV_STATE_CHECKED);

  if (OperatingParameters.hvacReverseValveEnable)
    lv_obj_add_state(ui_RevValveCheckbox, LV_STATE_CHECKED);
  else
    lv_obj_clear_state(ui_RevValveCheckbox, LV_STATE_CHECKED);
}

void SaveUncommonConfigSettings(lv_event_t * e)
{
  OperatingParameters.timezone_sel = lv_dropdown_get_selected(ui_TimezoneDropdown);
  OperatingParameters.timezone = (char *)(gmt_timezones[OperatingParameters.timezone_sel]);
  OperatingParameters.hvacReverseValveEnable = lv_obj_has_state(ui_RevValveCheckbox, LV_STATE_CHECKED);
  OperatingParameters.hvac2StageHeatEnable = lv_obj_has_state(ui_Hvac2StageHeatCheckbox, LV_STATE_CHECKED);
  OperatingParameters.thermostatBeepEnable = lv_obj_has_state(ui_AudibleBeepCheckbox, LV_STATE_CHECKED);

  setHvacModesDropdown();
  updateTimezoneFromConfig();
  updateThermostatParams();

#ifdef MQTT_ENABLED
  updateEnabledHvacModes();
#endif
}

void tftCalibrate(lv_event_t * e)
{
  tftCalibrateTouch();
  _ui_screen_change(&ui_MainScreen, LV_SCR_LOAD_ANIM_MOVE_RIGHT, 500, 0, &ui_MainScreen_screen_init);
  tftAwaken(e);
}

bool isCurrentScreenMain()
{
  if (lv_disp_get_scr_act(NULL) == ui_MainScreen)
    return true;
  else
    return false;
}

#ifdef MATTER_ENABLED
#endif

/**
 * Create a QR Code
 */
void lv_example_qrcode_1()
{
#ifdef MATTER_ENABLED
    lv_color_t bg_color = lv_palette_lighten(LV_PALETTE_LIGHT_BLUE, 5);
    lv_color_t fg_color = lv_palette_darken(LV_PALETTE_BLUE, 4);

    lv_obj_t * qr = lv_qrcode_create(lv_scr_act(), 150, fg_color, bg_color);
    // lv_obj_t * qr = lv_qrcode_create(ui_QRImage, 150, fg_color, bg_color);

    /*Set data*/
    // const char * data = "MT%3AY.K90AFN00KA0648G00";
    const char * data = "MATTER NOT YET ENABLED";
    if (strlen(OperatingParameters.MatterQR) > 0)
      lv_qrcode_update(qr, OperatingParameters.MatterQR, strlen(OperatingParameters.MatterQR));
    else
      lv_qrcode_update(qr, data, strlen(data));
    // lv_obj_center(qr);
    lv_obj_align(qr, LV_ALIGN_CENTER, 0, -20);

    /*Add a border with bg_color*/
    lv_obj_set_style_border_color(qr, bg_color, 0);
    lv_obj_set_style_border_width(qr, 5, 0);
#endif
}

void ShowQrOnScreen(lv_event_t * e)
{
#ifdef MATTER_ENABLED
  printf ("Loading QR and manual pairing codes\n");
  lv_example_qrcode_1();
  lv_label_set_text(ui_ManualPairingCode, OperatingParameters.MatterPairingCode);
#endif
}


void tftCountdown(lv_event_t * e)
{
  int n = 5;  // Countdown limit
  char buf[8];

#ifdef MATTER_ENABLED
  OperatingParameters.MatterEnabled = false;
#endif

  printf ("Initiating ESP restart\n");
  while (n >= 0)
  {
    lv_snprintf(buf, sizeof(buf), "%d", n);
    lv_label_set_text(ui_RestartCountdown, buf);
    // Force refresh the screen
    lv_refr_now(NULL);
    printf ("  Restarting in %d seconds\n", n);
    vTaskDelay(pdMS_TO_TICKS(1000));
    n--;
  }

  lv_label_set_text(ui_RestartCountdown, "Saving config");
  lv_refr_now(NULL);
  vTaskDelay(pdMS_TO_TICKS(1000));

  /* Initialize the ESP NVS layer */
  printf ("Initializing NVS\n");
  // nvs_flash_init();
  clearNVS();
  /* Rewrite the wifi credentials after resetting NVS storage */
  printf ("Rewriting wifi credentials\n");
  setWifiCreds();
  printf ("Saving thermostat config\n");
  updateThermostatParams();

  lv_label_set_text(ui_RestartCountdown, "Restarting...");
  lv_refr_now(NULL);
  vTaskDelay(pdMS_TO_TICKS(1000));

#ifdef MATTER_ENABLED
  printf ("Resetting Matter config and restarting ESP\n");
  MatterFactoryReset(); // Will also restart the ESP
#else
  printf ("Restarting the ESP32...\n");
  esp_restart();
#endif
}

void loadMqttSettings(lv_event_t * e)
{
#ifdef MQTT_ENABLED
  lv_textarea_set_text(ui_MqttHostname, OperatingParameters.MqttBrokerHost);
  lv_textarea_set_text(ui_MqttUsername, OperatingParameters.MqttBrokerUsername);
  lv_textarea_set_text(ui_MqttPassword, OperatingParameters.MqttBrokerPassword);

  printf ("On load:\n");
  printf ("  MQTT Broker: %s\n", OperatingParameters.MqttBrokerHost);
  printf ("  MQTT Username: %s\n", OperatingParameters.MqttBrokerUsername);
  printf ("  MQTT Password: %s\n", OperatingParameters.MqttBrokerPassword);
#endif
}

void saveMqttSettings(lv_event_t * e)
{
#ifdef MQTT_ENABLED
  strcpy (OperatingParameters.MqttBrokerHost, lv_textarea_get_text(ui_MqttHostname));
  strcpy (OperatingParameters.MqttBrokerUsername, lv_textarea_get_text(ui_MqttUsername));
  strcpy (OperatingParameters.MqttBrokerPassword, lv_textarea_get_text(ui_MqttPassword));

  updateThermostatParams();

  printf ("On save:\n");
  printf ("  MQTT Broker: %s\n", OperatingParameters.MqttBrokerHost);
  printf ("  MQTT Username: %s\n", OperatingParameters.MqttBrokerUsername);
  printf ("  MQTT Password: %s\n", OperatingParameters.MqttBrokerPassword);
#endif
}

void loadDeviceName(lv_event_t * e)
{
  lv_textarea_set_text(ui_DeviceHostname, OperatingParameters.FriendlyName);

  printf ("On load:\n");
  printf ("  Friendly Name:   %s\n", OperatingParameters.FriendlyName);
  printf ("  Device Hostname: %s\n", OperatingParameters.DeviceName);
}

void saveDeviceName(lv_event_t * e)
{
  char *oldName = strdup(OperatingParameters.DeviceName);

  strcpy (OperatingParameters.FriendlyName, lv_textarea_get_text(ui_DeviceHostname));

  char *p = (char *)OperatingParameters.FriendlyName;
  char *t = (char *)OperatingParameters.DeviceName;
  // Make DeviceName the same as FriendlyName just with all lower
  // case letters and no spaces.
  while (*p)
  {
    if (*p != ' ')
    {
      *t = tolower(*p);
      t++;
    }
    p++;
  }

  printf ("On save:\n");
  printf ("  Friendly Name:   %s\n", OperatingParameters.FriendlyName);
  printf ("  Device Hostname: %s\n", OperatingParameters.DeviceName);

  /* Rewrite the wifi credentials after resetting NVS storage */
  printf ("Rewriting wifi credentials\n");
  setWifiCreds();   // Save device name
  printf ("Saving thermostat config\n");
  updateThermostatParams();   // Save Friendly name

  if (strcmp(oldName, OperatingParameters.DeviceName))
  {
    printf ("Hostname/Devicename changed -- Restarting wifi to update network name\n");
    // Initiate a disconnect so the new wifi info will be used when auto-reconnect happens
    WifiDisconnect();
    // Immediately start a new wifi connection
    lastWifiReconnect = 0;
  }
}
